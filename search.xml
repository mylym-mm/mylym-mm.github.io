<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MVC &amp;&amp; API</title>
    <url>/2021/05/14/20-36-11/</url>
    <content><![CDATA[<p>概览：<br>1.API接口TOKEN设计（API的特点、api_token、user_token）        2.MVC        3.前端控制器模式MVC</p>
<span id="more"></span>

<h2 id="API接口TOKEN设计"><a href="#API接口TOKEN设计" class="headerlink" title="API接口TOKEN设计"></a><a href="https://www.cnblogs.com/xingxia/p/api_token.html">API接口TOKEN设计</a></h2><p>首先需要知道API是什么？<br>API（Application Programming Interface）即应用程序接口。你可以认为 API 是一个软件组件或是一个 Web  服务与外界进行的交互的接口。而我们在这里要谈论的，是作为一家公司如何跟外界进行交互。从另一个角度来说，API  是一套协议，规定了我们与外界的沟通方式：如何发送请求和接收响应。</p>
<p><strong>API的特点</strong>：</p>
<p>　　1、因为是非开放性的，所以所有的接口都是封闭的，只对公司内部的产品有效；<br>        2、因为是非开放性的，所以OAuth那套协议是行不通的，因为没有中间用户的授权过程；<br>        3、接口分为需要用户登录才能访问的和不需要用户登录就可访问的；</p>
<p>​            针对以上特点，移动端与服务端的通信就需要两种不同的TOKEN，一种针对接口的api_token,一种针对用户的user_token;</p>
<p><strong>一.api_token</strong></p>
<p>　　它的职责是保持接口访问的隐蔽性和有效性，保证接口只有可信任的来源才可以访问，参考思路如下：</p>
<p>　　按服务器端和客户端都拥有的共同属性生成一个随机串，客户端生成这个串，服务器也按同样算法生成一个串，用来校验客户端的串。</p>
<p>　　现在的接口基本是mvc模式，URL基本是restful风格，URL大体格式如下：</p>
<p>　　<a href="http://www.api.com/%E6%A8%A1%E5%9D%97%E5%90%8D/%E6%8E%A7%E5%88%B6%E5%99%A8%E5%90%8D/%E6%96%B9%E6%B3%95%E5%90%8D?%E5%8F%82%E6%95%B0%E5%90%8D1=%E5%8F%82%E6%95%B0%E5%80%BC1&amp;%E5%8F%82%E6%95%B0%E5%90%8D2=%E5%8F%82%E6%95%B0%E5%80%BC2">http://www.api.com/模块名/控制器名/方法名?参数名1=参数值1&amp;参数名2=参数值2</a></p>
<p>　　接口token生成规则参考如下：</p>
<p>　　　　$api_token = md5 (‘模块名’ + ‘控制器名’ + ‘方法名’ + ‘2018-1-18’ + ‘加密密钥’) = 789fed3842aabd834e9a5dd7735532de2</p>
<p>　　　　1.’2018-1-18’ 为当天时间</p>
<p>　　　　2.’加密密钥’为私有的加密密钥，手机端需要在服务端注册一个“接口使用者”账号后，系统会分配一个账号及密码，数据表设计参考如下：</p>
<p>　　　　　　字段名及字段类型　　　　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">client_id varchar(20) 客户端ID</span><br><span class="line">client_secret varchar(20) 客户端(加密)密钥 </span><br></pre></td></tr></table></figure>

<p>　　　　　　服务端接口校验，PHP实现流程如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;获取GET参数值</span><br><span class="line"> </span><br><span class="line">    $module &#x3D; $_GET[&#39;module&#39;];</span><br><span class="line"> </span><br><span class="line">    $controller &#x3D; $_GET[&#39;controller&#39;]</span><br><span class="line"> </span><br><span class="line">    $action &#x3D; $_GET[&#39;action&#39;];</span><br><span class="line"> </span><br><span class="line">    $client_id &#x3D; $_GET[&#39;client_id&#39;];</span><br><span class="line"> </span><br><span class="line">    $api_token &#x3D; $_GET[&#39;&#39;api_token];</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;根据客户端传过来的client_id，查询数据库，获取对应的client_secret</span><br><span class="line"> </span><br><span class="line">    $client_secret &#x3D; getClientSecret($client_id);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;服务端重新生成一个api_token</span><br><span class="line"> </span><br><span class="line">    $api_token_server &#x3D; md5($module . $controller . $action . date(&#39;Y-m-d&#39;, time()) . $client_secret);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;客户端传过来的api_token与服务端生成的api_token进行校对，如果不相等，则表示验证失败</span><br><span class="line"> </span><br><span class="line">    if ($api_token !&#x3D; $api_token_server) &#123;</span><br><span class="line"> </span><br><span class="line">        exit(&#39;access deny&#39;); &#x2F;&#x2F;拒绝访问</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;验证通过，返回数据给客户端</span><br><span class="line"> </span><br><span class="line">?&gt;    </span><br></pre></td></tr></table></figure>



<p><strong>二.user_token</strong></p>
<p>　　它的职责是保护用户的用户名及密码多次提交，以防密码泄露。</p>
<p>　　如果接口需要用户登录，其访问流程如下：</p>
<p>　　　　1、用户提交“用户名”和“密码”，实现登录（条件允许，这一步最好走https）；</p>
<p>　　　　2、登录成功后，服务端返回一个user_token，生成规则参考如下：</p>
<p>　　　　　　user_token = md5(‘用户的uid’ + ‘Unix时间戳’) = etye0fgkgk4ca2ttdsl0ae9a5dd77471fgf</p>
<p>　　　　　　服务端用数据表维护user_token的状态，表设计如下：</p>
<p>　　　　　　字段名及字段类型如下：　　　　　　　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_id int(11) 用户ID</span><br><span class="line">user_token varchar(36) 用户token</span><br><span class="line">expire_time int 过期时间（Unix时间戳）  </span><br></pre></td></tr></table></figure>

<p>　　服务端生成user_token后，返回给客户端（自己存储），客户端每次接口请求时，如果接口需要用户登录才能访问，则需要把 user_id与user_token传回给服务端，服务端接受到这2个参数后，需要做以下几步：</p>
<p>　　　　  1、检测user_token的有效性；</p>
<p>　　　　2、删除过期的user_token表记录；</p>
<p>　　　　3、根据user_id，user_token 获取表记录，如果表记录不存在，直接返回错误，如果记录存在，则进行下一步；</p>
<p>　　　　4、更新user_token 的过期时间（延期，保证其有效期内连续操作不掉线）；</p>
<p>　　　　5、返回接口数据；</p>
<p>接口用例如下：添加测试接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URL： http:&#x2F;&#x2F;www.api.com&#x2F;demo&#x2F;index&#x2F;add-demo?client_id&#x3D;wt373uesksklwkskx36sr5858t6&amp;api_token&#x3D;880fed4ca2aabd20ae9eessa74711de2&amp;user_token&#x3D;etye0fgkgk4ca2asehxlejeje5dd77471fgf&amp;user_id&#x3D;12</span><br><span class="line">请求方式： POST</span><br><span class="line">POST参数：title&#x3D;哈喽&amp;content&#x3D;我的世界</span><br><span class="line">返回数据：</span><br><span class="line">&#123;&#39;code&#39;&#x3D;&gt; 1,&#x2F;&#x2F; 1:成功 0:失败</span><br><span class="line">&#39;msg&#39;&#x3D;&gt; &#39;成功&#x2F;失败，无权访问&#39;</span><br><span class="line">&#39;data&#39;&#x3D;&gt; []&#125;</span><br></pre></td></tr></table></figure>

<p>　　</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p>
<ul>
<li><strong>Model（模型）</strong> 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li>
<li><strong>View（视图）</strong>  视图代表模型包含的数据的可视化。</li>
<li><strong>Controller（控制器）</strong> -控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li>
<li><img src="https://www.runoob.com/wp-content/uploads/2014/08/1200px-ModelViewControllerDiagram2.svg_.png" alt="三者关系"></li>
</ul>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>我们将创建一个作为模型的 <em>Student</em> 对象。<em>StudentView</em> 是一个把学生详细信息输出到控制台的视图类，<em>StudentController</em> 是负责存储数据到 <em>Student</em> 对象中的控制器类，并相应地更新视图 <em>StudentView</em>。</p>
<p><em>MVCPatternDemo</em>，我们的演示类使用 <em>StudentController</em> 来演示 MVC 模式的用法。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/08/mvc-2.svg" alt="类图"></p>
<h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h5><p>创建模型。</p>
<h6 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">	private String rollNo;   </span><br><span class="line">	private String name;   </span><br><span class="line">	public String getRollNo() &#123;</span><br><span class="line">    	return rollNo;   </span><br><span class="line">    &#125;   </span><br><span class="line">    public void setRollNo(String rollNo) &#123;      </span><br><span class="line">    	this.rollNo &#x3D; rollNo;   </span><br><span class="line">    &#125;   </span><br><span class="line">    public String getName() &#123;      </span><br><span class="line">    	return name;   </span><br><span class="line">    &#125;   </span><br><span class="line">    public void setName(String name) &#123;      </span><br><span class="line">    	this.name &#x3D; name;   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h5><p>创建视图。</p>
<h6 id="StudentView-java"><a href="#StudentView-java" class="headerlink" title="StudentView.java"></a>StudentView.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentView</span> </span>&#123;   </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStudentDetails</span><span class="params">(String studentName, String studentRollNo)</span></span>&#123;      			System.out.println(<span class="string">&quot;Student: &quot;</span>);      </span><br><span class="line">		System.out.println(<span class="string">&quot;Name: &quot;</span> + studentName);      </span><br><span class="line">		System.out.println(<span class="string">&quot;Roll No: &quot;</span> + studentRollNo);   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h5><p>创建控制器。</p>
<h6 id="StudentController-java"><a href="#StudentController-java" class="headerlink" title="StudentController.java"></a>StudentController.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;   </span><br><span class="line">	<span class="keyword">private</span> Student model;   </span><br><span class="line">	<span class="keyword">private</span> StudentView view;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StudentController</span><span class="params">(Student model, StudentView view)</span></span>&#123;      </span><br><span class="line">		<span class="keyword">this</span>.model = model;      </span><br><span class="line">		<span class="keyword">this</span>.view = view;   </span><br><span class="line">	&#125;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentName</span><span class="params">(String name)</span></span>&#123;     </span><br><span class="line">        model.setName(name);      </span><br><span class="line">    &#125;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getStudentName</span><span class="params">()</span></span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> model.getName();     </span><br><span class="line">    &#125;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentRollNo</span><span class="params">(String rollNo)</span></span>&#123;      </span><br><span class="line">        model.setRollNo(rollNo);       </span><br><span class="line">    &#125;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getStudentRollNo</span><span class="params">()</span></span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> model.getRollNo();      </span><br><span class="line">    &#125;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateView</span><span class="params">()</span></span>&#123;             </span><br><span class="line">        view.printStudentDetails(model.getName(), model.getRollNo());  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h5><p>使用 <em>StudentController</em> 方法来演示 MVC 设计模式的用法。</p>
<h6 id="MVCPatternDemo-java"><a href="#MVCPatternDemo-java" class="headerlink" title="MVCPatternDemo.java"></a>MVCPatternDemo.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCPatternDemo</span> </span>&#123;   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;       </span><br><span class="line">    <span class="comment">//从数据库获取学生记录      </span></span><br><span class="line">    Student model  = retrieveStudentFromDatabase();       </span><br><span class="line">    <span class="comment">//创建一个视图：把学生详细信息输出到控制台      </span></span><br><span class="line">    StudentView view = <span class="keyword">new</span> StudentView();       </span><br><span class="line">    StudentController controller = <span class="keyword">new</span> StudentController(model, view);       </span><br><span class="line">    controller.updateView();       </span><br><span class="line">    <span class="comment">//更新模型数据     </span></span><br><span class="line">    controller.setStudentName(<span class="string">&quot;John&quot;</span>);      </span><br><span class="line">    controller.updateView();   </span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Student <span class="title">retrieveStudentFromDatabase</span><span class="params">()</span></span>&#123;     </span><br><span class="line">        Student student = <span class="keyword">new</span> Student();      </span><br><span class="line">        student.setName(<span class="string">&quot;Robert&quot;</span>);      </span><br><span class="line">        student.setRollNo(<span class="string">&quot;10&quot;</span>);      </span><br><span class="line">        <span class="keyword">return</span> student;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h5><p>执行程序，输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student: </span><br><span class="line">Name: Robert</span><br><span class="line">Roll No: <span class="number">10</span></span><br><span class="line">Student: </span><br><span class="line">Name: John</span><br><span class="line">Roll No: <span class="number">10</span></span><br></pre></td></tr></table></figure>



<h2 id="前端控制器模式MVC"><a href="#前端控制器模式MVC" class="headerlink" title="前端控制器模式MVC"></a>前端控制器模式MVC</h2><p>前端控制器模式（Front Controller Pattern）是用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。</p>
<ul>
<li><strong>前端控制器（Front Controller）</strong> - 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。</li>
<li><strong>调度器（Dispatcher）</strong> - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。</li>
<li><strong>视图（View）</strong> - 视图是为请求而创建的对象。</li>
</ul>
<h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><p>我们将创建 <em>FrontController</em>、<em>Dispatcher</em> 分别当作前端控制器和调度器。<em>HomeView</em> 和 <em>StudentView</em> 表示各种为前端控制器接收到的请求而创建的视图。</p>
<p><em>FrontControllerPatternDemo</em>，我们的演示类使用 <em>FrontController</em> 来演示前端控制器设计模式。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/08/frontcontroller_pattern_uml_diagram.jpg" alt="前端控制器模式的 UML 图"></p>
<h5 id="步骤-1-1"><a href="#步骤-1-1" class="headerlink" title="步骤 1"></a>步骤 1</h5><p>创建视图。</p>
<h6 id="HomeView-java"><a href="#HomeView-java" class="headerlink" title="HomeView.java"></a>HomeView.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeView</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;     </span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying Home Page&quot;</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="StudentView-java-1"><a href="#StudentView-java-1" class="headerlink" title="StudentView.java"></a>StudentView.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentView</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;     </span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying Student Page&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤-2-1"><a href="#步骤-2-1" class="headerlink" title="步骤 2"></a>步骤 2</h5><p>创建调度器 Dispatcher。</p>
<h6 id="Dispatcher-java"><a href="#Dispatcher-java" class="headerlink" title="Dispatcher.java"></a>Dispatcher.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> StudentView studentView;   </span><br><span class="line">    <span class="keyword">private</span> HomeView homeView; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dispatcher</span><span class="params">()</span></span>&#123;    </span><br><span class="line">        studentView = <span class="keyword">new</span> StudentView();      </span><br><span class="line">        homeView = <span class="keyword">new</span> HomeView(); </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(String request)</span></span>&#123;   </span><br><span class="line">        <span class="keyword">if</span>(request.equalsIgnoreCase(<span class="string">&quot;STUDENT&quot;</span>))&#123;  </span><br><span class="line">            studentView.show();     </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;       </span><br><span class="line">            homeView.show();     </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤-3-1"><a href="#步骤-3-1" class="headerlink" title="步骤 3"></a>步骤 3</h5><p>创建前端控制器 FrontController。</p>
<h6 id="FrontController-java"><a href="#FrontController-java" class="headerlink" title="FrontController.java"></a>FrontController.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontController</span> </span>&#123;     </span><br><span class="line">    <span class="keyword">private</span> Dispatcher dispatcher;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrontController</span><span class="params">()</span></span>&#123;     </span><br><span class="line">        dispatcher = <span class="keyword">new</span> Dispatcher();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAuthenticUser</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;User is authenticated successfully.&quot;</span>);      </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trackRequest</span><span class="params">(String request)</span></span>&#123;   </span><br><span class="line">        System.out.println(<span class="string">&quot;Page requested: &quot;</span> + request);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchRequest</span><span class="params">(String request)</span></span>&#123;  </span><br><span class="line">        <span class="comment">//记录每一个请求    </span></span><br><span class="line">        trackRequest(request);  </span><br><span class="line">        <span class="comment">//对用户进行身份验证      </span></span><br><span class="line">        <span class="keyword">if</span>(isAuthenticUser())&#123;   </span><br><span class="line">            dispatcher.dispatch(request); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤-4-1"><a href="#步骤-4-1" class="headerlink" title="步骤 4"></a>步骤 4</h5><p>使用 <em>FrontController</em> 来演示前端控制器设计模式。</p>
<h6 id="FrontControllerPatternDemo-java"><a href="#FrontControllerPatternDemo-java" class="headerlink" title="FrontControllerPatternDemo.java"></a>FrontControllerPatternDemo.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontControllerPatternDemo</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;      </span><br><span class="line">        FrontController frontController = <span class="keyword">new</span> FrontController();      		</span><br><span class="line">        frontController.dispatchRequest(<span class="string">&quot;HOME&quot;</span>);  </span><br><span class="line">        frontController.dispatchRequest(<span class="string">&quot;STUDENT&quot;</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤-5-1"><a href="#步骤-5-1" class="headerlink" title="步骤 5"></a>步骤 5</h5><p>执行程序，输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page requested: HOME</span><br><span class="line">User is authenticated successfully.</span><br><span class="line">Displaying Home Page</span><br><span class="line">Page requested: STUDENT</span><br><span class="line">User is authenticated successfully.</span><br><span class="line">Displaying Student Page</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>API</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF 攻击</title>
    <url>/2021/05/15/20-34-57/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SSL安全证书</title>
    <url>/2021/05/15/21-13-24/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Token 认证的来龙去脉</title>
    <url>/2021/05/15/18-00-24/</url>
    <content><![CDATA[<p>概览：</p>
<p>1.为什么要用 Token？</p>
<p>2.需要设置有效期吗？</p>
<p>3.时序图表示    （1）登录    （2）业务请求    （3）Token 过期，刷新 Token</p>
<p>4.无状态 Token</p>
<p>5.分离认证服务</p>
<p>6.不受信的业务服务器</p>
<p>补充：java生成token方法</p>
<span id="more"></span>

<p> Token 认证的来龙去脉-原文链接：<a href="https://my.oschina.net/jamesfancy/blog/1613994">https://my.oschina.net/jamesfancy/blog/1613994</a></p>
<p>Token 无状态-原文链接：<a href="https://www.jianshu.com/p/7c34b78f1675">https://www.jianshu.com/p/7c34b78f1675</a></p>
<p>通常情况下，我们在讨论某个技术的时候，都是从问题开始。那么第一个问题：</p>
<h3 id="为什么要用-Token？"><a href="#为什么要用-Token？" class="headerlink" title="为什么要用 Token？"></a>为什么要用 Token？</h3><p>而要回答这个问题很简单——因为它能解决问题！</p>
<p>可以解决哪些问题呢？</p>
<ol>
<li>Token 完全由应用管理，所以它可以避开同源策略</li>
<li>Token 可以避免 <a href="https://www.oschina.net/action/GoToLink?url=http://www.cnblogs.com/shanyou/p/5038794.html">CSRF 攻击</a></li>
<li>Token 可以是无状态的，可以在多个服务间共享</li>
</ol>
<p>Token 是在服务端产生的。如果前端使用用户名/密码向服务端请求认证，服务端认证成功，那么在服务端会返回 Token  给前端。前端可以在每次请求的时候带上 Token 证明自己的合法地位。如果这个 Token  在服务端持久化（比如存入数据库），那它就是一个永久的身份令牌。</p>
<p>于是，又一个问题产生了：需要为 Token 设置有效期吗？</p>
<h3 id="需要设置有效期吗？"><a href="#需要设置有效期吗？" class="headerlink" title="需要设置有效期吗？"></a>需要设置有效期吗？</h3><p>对于这个问题，我们不妨先看两个例子。一个例子是登录密码，一般要求定期改变密码，以防止泄漏，所以密码是有有效期的；另一个例子是安全证书。<strong>SSL 安全证书</strong>都有有效期，目的是为了解决吊销的问题，对于这个问题的详细情况，<a href="https://www.oschina.net/action/GoToLink?url=https://www.zhihu.com/question/20803288">来看看知乎的回答</a>。所以无论是从安全的角度考虑，还是从吊销的角度考虑，Token 都需要设有效期。</p>
<p>那么有效期多长合适呢？</p>
<p>只能说，根据系统的安全需要，尽可能的短，但也不能短得离谱——想像一下手机的自动熄屏时间，如果设置为 10  秒钟无操作自动熄屏，再次点亮需要输入密码，会不会疯？如果你觉得不会，那就亲自试一试，设置成可以设置的最短时间，坚持一周就好（不排除有人适应这个时间，毕竟手机厂商也是有用户体验研究的）。</p>
<p>然后新问题产生了，如果用户在正常操作的<strong>过程中</strong>，Token 过期失效了，要求用户重新登录……用户体验岂不是很糟糕？</p>
<p>为了解决在操作过程不能让用户感到 Token 失效这个问题，<u>有一种方案</u>是在服务器端保存 Token <strong>状态</strong>，用户每次操作都会<strong>自动刷新</strong>（推迟） Token 的过期时间——Session 就是采用这种策略来保持用户登录状态的。然而仍然存在这样一个问题，在<strong>前后端分离</strong>、<strong>单页 App</strong>  这些情况下，每秒种可能发起很多次请求，每次都去刷新过期时间会产生非常大的代价。如果 Token  的过期时间被持久化到数据库或文件，代价就更大了。所以通常为了提升效率，减少消耗，会把 Token 的过期时间保存在<strong>缓存或者内存</strong>中。</p>
<p>还有<u>另一种方案</u>，使用 <strong>Refresh Token</strong>，它可以避免频繁的读写操作。这种方案中，服务端不需要刷新 Token 的过期时间，一旦  Token 过期，就反馈给前端，前端使用 Refresh Token 申请一个全新 Token  继续使用。这种方案中，服务端只需要在客户端请求更新 Token 的时候对 Refresh Token  的有效性进行一次检查，大大减少了更新有效期的操作，也就避免了频繁读写。当然 Refresh Token  也是有有效期的，但是这个有效期就可以长一点了，比如，以天为单位的时间。</p>
<p>相比session而言，Refresh token有以下几点优势</p>
<ol>
<li>服务端不需要缓存用户信息，减少服务器压力</li>
<li>token缓存在客户端，服务器重启，登录状态不会失效</li>
<li>session是浏览器特有的，app要支持会比较繁琐，token就没有这样的限制</li>
<li>易于扩展，存在多台服务器的情况下，使用负载均衡，第一次登录请求转发到A服务器，在A服务器的session中缓存了用户的登录信息，如果第二次请求转发到了B服务器，就丢失了登录状态。虽然可以使用redis等手段共享session，但token就简单很多，不同的服务器只需要使用相同的一段解密代码即可</li>
</ol>
<h3 id="时序图表示"><a href="#时序图表示" class="headerlink" title="时序图表示"></a>时序图表示</h3><p>使用 Token 和 Refresh Token 的时序图如下：</p>
<h5 id="1）登录"><a href="#1）登录" class="headerlink" title="1）登录"></a>1）登录</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="\uploads\upload.jpg" alt="clipboard.png" style="zoom:67%;" /></h5><img src="\uploads\token-p1.jpg" alt="clipboard.png" style="zoom:67%;" />

<h5 id="2）业务请求"><a href="#2）业务请求" class="headerlink" title="2）业务请求"></a>2）业务请求</h5><img src="\uploads\request.jpg" alt="clipboard.png" style="zoom:80%;" />

<h5 id="3）Token-过期，刷新-Token"><a href="#3）Token-过期，刷新-Token" class="headerlink" title="3）Token 过期，刷新 Token"></a>3）Token 过期，刷新 Token</h5><img src="D:\uploads\newToken.jpg" alt="clipboard.png" style="zoom:80%;" />

<p>上面的时序图中并未提到 Refresh Token 过期怎么办。不过很显然，Refresh Token 既然已经过期，就该要求用户重新登录了。</p>
<p>当然还可以把这个机制设计得更复杂一些，比如，Refresh Token 每次使用的时候，都更新它的过期时间，直到与它的创建时间相比，已经超过了非常长的一段时间（比如三个月），这等于是在相当长一段时间内允许 Refresh Token 自动续期。</p>
<p>到目前为止，Token 都是有状态的，即在服务端需要保存并记录相关属性。那说好的无状态呢，怎么实现？</p>
<h3 id="无状态-Token"><a href="#无状态-Token" class="headerlink" title="无状态 Token"></a>无状态 Token</h3><p>如果我们把所有状态信息都附加在 Token 上，服务器就可以不保存。但是服务端仍然需要认证 Token  有效。不过只要服务端能确认是自己签发的 Token，而且其信息未被改动过，那就可以认为 Token  有效——“签名”可以作此保证。平时常说的签名都存在一方签发，另一方验证的情况，所以要使用非对称加密算法。但是在这里，签发和验证都是同一方，所以对称加密算法就能达到要求，而对称算法比非对称算法要快得多（可达数十倍差距）。更进一步思考，对称加密算法除了加密，还带有还原加密内容的功能，而这一功能在对 Token 签名时并无必要——既然不需要解密，摘要（散列）算法就会更快。可以指定密码的散列算法，自然是 HMAC。</p>
<p>上面说了这么多，还需要自己去实现吗？不用！<a href="https://www.oschina.net/action/GoToLink?url=https://jwt.io/">JWT</a> 已经定义了详细的规范，而且有各种语言的若干实现。</p>
<p>不过在使用无状态 Token 的时候在服务端会有一些变化，服务端虽然不保存有效的 Token 了，却需要保存未到期却已注销的  Token。如果一个 Token 未到期就被用户主动注销，那么服务器需要保存这个被注销的 Token，以便下次收到使用这个仍在有效期内的  Token 时判其无效。有没有感到一点沮丧？</p>
<p>在前端可控的情况下（比如前端和服务端在同一个项目组内），可以协商：前端一但注销成功，就丢掉本地保存（比如保存在内存、LocalStorage 等）的 Token 和 Refresh Token。基于这样的约定，服务器就可以<strong>假设</strong>收到的 Token 一定是没注销的（因为注销之后前端就不会再使用了）。</p>
<p>如果前端不可控的情况，仍然可以进行上面的假设，但是这种情况下，需要尽量缩短 Token 的有效期，而且必须在用户主动注销的情况下让 Refresh Token 无效。这个操作<strong>存在一定的安全漏洞</strong>，因为用户会认为已经注销了，实际上在较短的一段时间内并没有注销。如果应用设计中，这点漏洞并不会造成什么损失，那采用这种策略就是可行的。</p>
<p>在使用无状态 Token 的时候，有两点需要注意：</p>
<ol>
<li>Refresh Token 有效时间较长，所以它应该在服务器端有状态，以增强安全性，确保用户注销时可控</li>
<li>应该考虑使用二次认证来增强敏感操作的安全性</li>
</ol>
<p>到此，关于 Token 的话题似乎差不多了——然而并没有，上面说的只是认证服务和业务服务集成在一起的情况，如果是分离的情况呢？</p>
<h3 id="分离认证服务"><a href="#分离认证服务" class="headerlink" title="分离认证服务"></a>分离认证服务</h3><p>当 Token 无状态之后，单点登录就变得容易了。前端拿到一个有效的 Token，它就可以在任何同一体系的服务上认证通过——只要它们使用同样的密钥和算法来认证 Token 的有效性。就像这样：</p>
<img src="\uploads\token-p4.jpg" alt="clipboard.png" style="zoom:80%;" />

<p>当然，如果 Token 过期了，前端仍然需要去认证服务更新 Token：</p>
<img src="\uploads\token-p5.jpg" alt="clipboard.png" style="zoom:80%;" />

<p>可见，虽然认证和业务分离了，实际即并没产生多大的差异。当然，这是建立在<strong>认证服务器信任业务服务器的前提</strong>下，因为认证服务器产生 Token 的密钥和业务服务器认证 Token 的密钥和算法相同。换句话说，业务服务器同样可以创建有效的 Token。</p>
<p>如果业务服务器不能被信任，该怎么办？</p>
<h3 id="不受信的业务服务器"><a href="#不受信的业务服务器" class="headerlink" title="不受信的业务服务器"></a>不受信的业务服务器</h3><p>遇到不受信的业务服务器时，很容易想到的办法是使用不同的密钥。认证服务器使用密钥1签发，业务服务器使用密钥2验证——这是典型非对称加密签名的应用场景。认证服务器自己使用私钥对 Token 签名，公开公钥。信任这个认证服务器的业务服务器保存公钥，用于验证签名。幸好，JWT 不仅可以使用 HMAC 签名，也可以使用  RSA（一种非对称加密算法）签名。</p>
<p>不过，当业务服务器已经不受信任的时候，<strong>多个业务服务器之间使用相同的 Token 对用户来说是不安全的</strong>。因为任何一个服务器拿到 Token 都可以仿冒用户去另一个服务器处理业务……悲剧随时可能发生。</p>
<p>为了防止这种情况发生，就需要在认证服务器产生 Token 的时候，把使用该 Token 的业务服务器的信息记录在 Token 中，这样当另一个业务服务器拿到这个 Token 的时候，发现它并不是自己应该验证的 Token，就可以直接拒绝。</p>
<p>现在，认证服务器不信任业务服务器，业务服务器相互也不信任，但前端是信任这些服务器的——如果前端不信任，就不会拿 Token 去请求验证。那么为什么会信任？可能是因为这些是同一家公司或者同一个项目中提供的若干服务构成的服务体系。</p>
<p>但是，前端信任不代表用户信任。如果 Token 没有携带用户隐私（比如姓名），那么用户不会关心信任问题。但如果 Token  含有用户隐私的时候，用户得关心信任问题了。这时候认证服务就不得不再啰嗦一些，当用户请求 Token  的时候，问上一句，你真的要授权给某某某业务服务吗？而这个“某某某”，用户怎么知道它是不是真的“某某某”呢？用户当然不知道，甚至认证服务也不知道，因为公钥已经公开了，任何一个业务都可以声明自己是“某某某”。</p>
<p>为了得到用户的信任，认证服务就不得不帮助用户来甄别业务服务。所以，认证服器决定不公开公钥，而是要求业务服务先申请注册并通过审核。只有通过审核的业务服务器才能得到认证服务为它创建的，仅供它使用的公钥。如果该业务服务泄漏公钥带来风险，由该业务服务自行承担。现在认证服务可以清楚的告诉用户，“某某某”服务是什么了。如果用户还是不够信任，认证服务甚至可以问，某某某业务服务需要请求 A、B、C 三项个人数据，其中 A 是必须的，不然它不工作，是否允许授权？如果你授权，我就把你授权的几项数据加密放在 Token 中……</p>
<p>废话了这么多，有没有似曾相识……对了，这类似开放式 API 的认证过程。开发式 API 多采用 OAuth 认证，而关于 OAuth 的探讨资源非常丰富，这里就不深究了。</p>
<h4 id="java生成token方法"><a href="#java生成token方法" class="headerlink" title="java生成token方法"></a>java生成token方法</h4><h5 id="JWT（JSON-Web-Token）"><a href="#JWT（JSON-Web-Token）" class="headerlink" title="JWT（JSON Web Token）"></a>JWT（JSON Web Token）</h5><p>网上找到的大部分资料都是使用JWT来生成token，JWT生成的token包含三部分</p>
<ol>
<li><p>header：包含token类型和加密算法</p>
</li>
<li><p>payload：存放自定义数据</p>
</li>
<li><p>signature：对前面两部分的签名，防止篡改数据\r\n\r\n用JWT生成的token是很长的一串字符串，用Base64进行编码，可以解码出原数据，注意不能放一些私密信息，比如用户密码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\r\n<span class="selector-class">.eyJleHBpcmVUaW1lIjoxNTQ5NTU0NDUyLCJ1c2VyTmFtZSI6IuacveacqCIsInVzZXJJZCI6IjY2NiJ9</span>\r\n<span class="selector-class">.fiQKWuMTWbkfQ3dOozoJr13pJSmKnc5El4EBnKyU42o</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>上面这很长的一串就是用JWT生成的token，可以感受一下这个长度。客户端的每次请求都要带上这么一大串，服务端的每次响应都要返回这么一大串，我个人是难以接受的。所以我用了下面那种方法</p>
<h5 id="AES（Advanced-Encryption-Standard）"><a href="#AES（Advanced-Encryption-Standard）" class="headerlink" title="AES（Advanced Encryption Standard）"></a>AES（Advanced Encryption Standard）</h5><p>token本质是一段加密的字符串，包含登录用户的一些信息，通过解密可以获取这些信息，所以理论上任何安全的加密解密手段都可以用来生成token<br> 高级加密标准AES，在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。AES采用对称加密，相比于非对称加密，对称加密效率更快</p>
<ul>
<li>对称加密：加密和解密使用相同的密钥。适用于单方面的加密解密，密钥不能泄露</li>
<li>非对称加密：使用公钥加密，私钥解密。适用于一方加密，另一方解密，比如前后端的数据传输，可以在客户端使用公钥对数据进行加密，在服务端使用密钥进行解密，增强数据安全性<br> token的加密解密都在服务端进行，所以使用对称加密的AES算法即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EmaZUvyM9aabQ2Jmo6THJ&#x2F;r3&#x2F;e2xAjpRmoA5TzvuR4I&#x3D;</span><br></pre></td></tr></table></figure>

<p>上面这一小串就是用AES生成的token了，是不是清爽了很多，而且没有密钥无法解密，相比JWT生成的token，AES生成的token携带的数据更安全</p>
]]></content>
      <tags>
        <tag>Token</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Http无状态？</title>
    <url>/2021/05/15/21-13-48/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>牛客华为-字符串类题-js</title>
    <url>/2021/05/10/01-30-15/</url>
    <content><![CDATA[<p>概览（共9题-题目）：<br>1.字符串最后一个单词的长度        2.计算某字母出现次数        3.字符串分隔        4.进制转换<br>5.字符个数统计        6.数字颠倒        7.字符串反转        8.句子逆序        9.字符串排序</p>
<span id="more"></span>

<h2 id="字符串类型题-js"><a href="#字符串类型题-js" class="headerlink" title="字符串类型题  js"></a>字符串类型题  js</h2><h4 id="T1-字符串最后一个单词的长度"><a href="#T1-字符串最后一个单词的长度" class="headerlink" title="T1.字符串最后一个单词的长度"></a>T1.字符串最后一个单词的长度</h4><p>题目描述：计算字符串最后一个单词的长度，单词以空格隔开，字符串长度小于5000。<br>输入：输入一行，代表要计算的字符串，非空，长度小于5000。<br>输出：输出一个整数，表示输入字符串最后一个单词的长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解1：简单解法，但不满足具体题意</span></span><br><span class="line"><span class="keyword">let</span> s = readline().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s[s.length-<span class="number">1</span>].length) </span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解2：满足题目描述具体解法</span></span><br><span class="line"><span class="keyword">let</span> strArr = readline().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(strArr.length &amp;&amp; strArr.length &lt; <span class="number">5000</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strArr[strArr.length-<span class="number">1</span>].length)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;输入应非空&amp;&amp;字符串长度小于5000&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>收获：</p>
<ul>
<li><p>之前好像没有用过readline()函数完全没有映像；split()函数复习（用split(‘ ‘)把字符串按照空格分成数组）；输出函数console.log()好几天没写差点忘了差点写print哈哈哈（这个其实可以）；</p>
</li>
<li><p>JavaScript输出：JavaScript，没有任何打印或者输出的函数</p>
</li>
<li><p>JavaScript显示数据：JavaScript可以通过不同的方式来输出数据：</p>
<ul>
<li>使用window.alert()弹出警告框。</li>
<li>使用document.write()方法将内容写到HTML文档中</li>
<li>使用innerHTML写入到HTML元素</li>
<li>使用console.log()写入到浏览器的控制台</li>
</ul>
</li>
<li><p>（Object一共有两类原生方法，一是本身的方法，二是实例方法）</p>
<ul>
<li><p>所谓本身的方法就是直接定义在Object对象的方法。<code>Object.print = function(o)&#123;console.log(o) &#125;;</code>print方法是直接定义在Object对象上的</p>
</li>
<li><p>所谓实例方法就是定义在Object原型对象 Object.prototype 上的方法。它可以被Object实例直接使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.prototype.print &#x3D; function () &#123;</span><br><span class="line">	console.log(this) ;</span><br><span class="line">&#125;;</span><br><span class="line">let obj &#x3D; new Object();</span><br><span class="line">obj.print()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="T2-计算某字母出现次数"><a href="#T2-计算某字母出现次数" class="headerlink" title="T2.计算某字母出现次数"></a>T2.计算某字母出现次数</h4><p>题目描述：写出一个程序，接受一个由字母、数字和空格组成的字符串，和一个字母，然后输出输入字符串                    中该字母的出现次数。不区分大小写，字符串长度小于500。<br>输入：第一行输入一个由字母和数字以及空格组成的字符串，第二行输入一个字母。<br>输出：输出输入字符串中含有该字符的个数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解1</span></span><br><span class="line"><span class="keyword">let</span> line = readline().toLowerCase()</span><br><span class="line"><span class="keyword">let</span> strget = readline().toLowerCase()</span><br><span class="line"><span class="built_in">console</span>.log(line.split(<span class="string">&#x27;&#x27;</span>).filter(<span class="function"><span class="params">e</span>=&gt;</span>e===strget).length)</span><br><span class="line"><span class="comment">//这里的console.log可以换成print</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解2</span></span><br><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> a = readline().toLowerCase()</span><br><span class="line">    <span class="keyword">let</span> strA = line.toLowerCase()</span><br><span class="line">    <span class="keyword">for</span> (chart <span class="keyword">of</span> strA)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a === chart)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>收获：</p>
<ul>
<li><p>不区分大小写：将用来比较的字符串都换成小写/大写；</p>
</li>
<li><p>直接对一个字符串进行分割、过滤、求长度；</p>
</li>
<li><p>filter函数：<code>**filter()**</code>方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p>
</li>
<li><p>Node.js的readline()：模块提供了一个接口，用于一次一行地读取可读流例如（ process.stdin）中的数据。</p>
</li>
<li><p>可读流：是对数据来源的一种抽象。可读流的例子包括：<br>客户端的HTTP响应、服务器的HTTP请求、fs的读取流、zlib流、crypto流、TCP socket、子进程 stdout 与 stderr、process.stdin</p>
</li>
<li><p>由for(…… of…… ) 引出的关于字符串遍历的几种方法的收集：</p>
<ul>
<li> for循环：要遍历字符串的所有字符，我们可以使用一个普通的for循环，并使用一个循环计数器（i）来对字符串索引遍历</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Buzz&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(str[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>for…in…：存在一种特殊的循环形式，变量 i 自动接收索引，以便可以使用来访问每个字符<code>str[i]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> str)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(str[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>for…of…：使用<code>for item of str</code>。变量<code>item</code>直接接收字符，因此不必使用索引。如果代码不需要每个字符的索引值，则此循环格式甚至更简单。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(char);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="T3-字符串分隔"><a href="#T3-字符串分隔" class="headerlink" title="T3.字符串分隔"></a>T3.字符串分隔</h4><p>题目描述：连续输入字符串，请按长度为8拆分每个字符串后输出到新的字符串数                组；长度不是8整数倍的字符串请在后面补数字0，空字符串不处理。<br>输入：连续输入字符串(输入多次,每个字符串长度小于100)<br>输出：输出到长度为8的新字符串数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解1，先加7个0，然后只保留能整除8的部分的字符串，然后每8个print一次</span></span><br><span class="line"><span class="keyword">while</span>(str = readline())&#123;</span><br><span class="line">    str+=<span class="string">&#x27;0000000&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> len = <span class="built_in">Math</span>.floor(str.length/<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        print(str.substring(i*<span class="number">8</span>,(i+<span class="number">1</span>)*<span class="number">8</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解2,直接把传进来的一行处理了，从头到尾遍历字符串line，把它加进str,大于7（8）时就输出，然后str清零，遍历完了之后用if语句看str是不是空，不是的话加0到8个输出。</span></span><br><span class="line"><span class="keyword">while</span>((line=readline()))&#123;</span><br><span class="line">    <span class="keyword">let</span> str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;line.length;i++)&#123;</span><br><span class="line">        str=str+line[i];</span><br><span class="line">        <span class="keyword">if</span>(str.length&gt;<span class="number">7</span>)&#123;</span><br><span class="line">            print(str);</span><br><span class="line">            str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(str.length&lt;<span class="number">8</span>) str+=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">        print(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>收获：</p>
<ul>
<li>题目‘连续输入字符串’，解题时用<code>while(line = readline())&#123; &#125;</code></li>
<li><code>**Math.floor()**</code>为向下取整。学习<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a>，以下为个人觉得需要记住的：<ul>
<li>Math.abs(x)  绝对值</li>
<li>Math.random()  0 到 1 之间的伪随机数</li>
<li>Math.round(x)  返回四舍五入后的整数</li>
<li>Math.ceil(x)  一个数向上取整后的值</li>
<li>Math.floor(x)  一个数向下取整后的值</li>
<li>Math.log(x)  自然对数</li>
<li>Math.lnx  自然对数</li>
<li>Math.PI  圆周率，一个圆的周长和直径之比，约等于 <code>3.14159</code></li>
<li>Math.min([x,[y[,…]]])  返回零到多个数值中最小值</li>
<li>Math.max([x,[y[,…]]])  返回零到多个数值中最大值</li>
</ul>
</li>
<li>学习<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring">substring</a>方法，返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。语法：<code>str.substring(indexStart[, indexEnd])</code></li>
<li>由于空字符串不处理，所以<code>str+=&#39;0000000&#39;</code>这里是加7个0；加8个的话可能会导致在原字符串长度就可以整除8的情况下加一个空字符串；</li>
<li>由于是按行输入和按长度分解的，所以不应该直接使用str.split()函数分解成数组。与题意不符</li>
</ul>
<h4 id="T4-进制转换"><a href="#T4-进制转换" class="headerlink" title="T4.进制转换"></a>T4.进制转换</h4><p>题目描述：写出一个程序，接受一个十六进制的数，输出该数值的十进制表示。<br>输入：输入一个十六进制的数值字符串。注意：一个用例会同时有多组输入数据，请参考帖子<a href="https://www.nowcoder.com/discuss/276%E5%A4%84%E7%90%86%E5%A4%9A%E7%BB%84%E8%BE%93%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82">https://www.nowcoder.com/discuss/276处理多组输入的问题。</a><br>输出：输出该数值的十进制字符串。不同组的测试用例用\n隔开。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解1</span></span><br><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>+<span class="built_in">parseInt</span>(line,<span class="number">16</span>))</span><br><span class="line">    <span class="comment">//等于console.log(&#x27;&#x27;+parseInt(line,16))</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>收获：</p>
<ul>
<li><code>parseInt(string,radix)</code>函数  : 解析radix进制的string为十进制数；如果string的第一个非空格字符不是数字或者radix不在[2,36]这个范围的话返回NaN;如果string不是一个字符串，则将其转换为字符串(使用  <code>ToString </code>抽象操作)。字符串开头的空白符将会被忽略。radix，从2到36，可以不写，但可能出错。</li>
<li>NaN属性是代表非数字值的特殊值。该属性用于指示某个值不是数字。可以把 Number 对象设置为该值，来指示其不是数字值。</li>
<li>这个print()是封装过的console.log()</li>
<li>console.log()默认是换行的，不用单独处理，如果想输出换行，可以用console.log( ‘\n’ );</li>
<li>用’’+把结果转换成字符串</li>
</ul>
<h4 id="T5-字符个数统计"><a href="#T5-字符个数统计" class="headerlink" title="T5.字符个数统计"></a>T5.字符个数统计</h4><p>题目描述：  编写一个函数，计算字符串中含有的不同字符的个数。字符在ACSII码范围内(0<del>127)，换行表示结束符，不算在字符里。不在范围内的不作统计。多个相同的字符只计算一次<br>例如，对于字符串abaca而言，有a、b、c三种不同的字符，因此输出3。<br>输入：输入一行没有空格的字符串。<br>输出：输出范围在(0</del>127)字符的个数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> line = readline()</span><br><span class="line"><span class="keyword">let</span> arr=[]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;line.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.indexOf(line[i])==-<span class="number">1</span>&amp;&amp;line.charCodeAt(i)&lt;=<span class="number">127</span>&amp;&amp;line.charCodeAt(i)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        arr.push(line[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.length)</span><br></pre></td></tr></table></figure>

<p>收获：</p>
<ul>
<li><code>**str.charCodeAt(index)**</code> 方法返回 <code>0</code> 到 <code>65535</code> 之间的整数，表示给定索引处的 UTF-16 代码单元。参数index：一个大于等于 <code>0</code>，小于字符串长度的整数。如果不是一个数值，则默认为 <code>0</code>。返回值：指定 <code>index</code> 处字符的 UTF-16 代码单元值的一个数字；如果 <code>index</code> 超出范围，<code>charCodeAt()</code> 返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN"><code>NaN</code></a>。</li>
</ul>
<h4 id="T6-数字颠倒"><a href="#T6-数字颠倒" class="headerlink" title="T6.数字颠倒"></a>T6.数字颠倒</h4><p>题目描述：  输入一个整数，将这个整数以字符串的形式逆序输出。 程序不考虑负数的情况，若数字含                有0，则逆序形式也含有0，如输入为100，则输出为001<br>输入：输入一个int整数<br>输出：将这个整数以字符串的形式逆序输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解1</span></span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">String</span>(readline())</span><br><span class="line"><span class="built_in">console</span>.log(line.toString().split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解2</span></span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">String</span>(readline())</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=line.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    str+=line[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure>

<h4 id="T7-字符串反转"><a href="#T7-字符串反转" class="headerlink" title="T7.字符串反转"></a>T7.字符串反转</h4><p>题目描述：  接受一个只包含小写字母的字符串，然后输出该字符串反转后的字符串。（字符串长度不                    超过1000）<br>输入：输入一行，为一个只包含小写字母的字符串。<br>输出：输出该字符串反转后的字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> input = readline();</span><br><span class="line"><span class="keyword">var</span> length = input.length;</span><br><span class="line"><span class="keyword">if</span>(length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(length &gt; <span class="number">1000</span>)&#123;                <span class="comment">//字符串长度不超过1000</span></span><br><span class="line">        length = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span>(<span class="regexp">/^[a-z]+$/</span>.test(input))&#123;       <span class="comment">//只包含小写字母</span></span><br><span class="line">          <span class="built_in">console</span>.log(input.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>))</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="T8-句子逆序"><a href="#T8-句子逆序" class="headerlink" title="T8.句子逆序"></a>T8.句子逆序</h4><p>题目描述：  将一个英文语句以单词为单位逆序排放。例如“I am a boy”，逆序排放后为“boy a am I”<br> 所有单词之间用一个空格隔开，语句中除了英文字母外，不再包含其他字符<br>输入：输入一个英文语句，每个单词用空格隔开。保证输入只包含空格和字母。<br>输出：得到逆序的句子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(line.split(<span class="string">&quot; &quot;</span>).reverse().join(<span class="string">&quot; &quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="T9-字符串排序"><a href="#T9-字符串排序" class="headerlink" title="T9.字符串排序"></a>T9.字符串排序</h4><p>题目描述：  给定n个字符串，请对n个字符串按照字典序排列。<br>输入：输入第一行为一个正整数n(1≤n≤1000),下面n行为n个字符串(字符串长度≤100),字符串中只含有大小写字母。<br>输出：数据输出n行，输出结果为按照字典序排列的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num=<span class="built_in">Number</span>(readline())</span><br><span class="line"><span class="keyword">let</span> arr=[]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">    arr.push(readline())</span><br><span class="line">&#125;</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>收获：</p>
<ul>
<li>Number()  把readline接收到的字符串转换成数字</li>
<li>arr.sort()用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序，并返回数组。默认排序顺序是在将元素<strong>转换为字符串</strong>，然后比较它们的UTF-16代码单元值序列时构建的。<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">arr.sort([compareFunction])</a></li>
<li>参数compareFunction，可省，用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。 例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 <code>compareFunction</code>），比较的数字会先被转换为字符串，所以在Unicode顺序上 “80” 要比 “9” 要靠前。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>同源策略</title>
    <url>/2021/05/15/20-34-29/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>前后端项目之王者荣耀爬虫</title>
    <url>/2021/05/11/14-51-21/</url>
    <content><![CDATA[<p>概览：</p>
<p>1.flask框架模板        2.WSGI        3.反爬虫机制和破解方法汇总    </p>
<p>4.raise_for_status()        5.bind()        6.Python f 字符串教程    </p>
<span id="more"></span>



<p>题外话：</p>
<p>今天花了1小时在车联网课程大作业上，了解车联网的技术和当前面临的挑战。</p>
<p>随后回归前端学习。</p>
<h3 id="前后端项目之王者荣耀爬虫"><a href="#前后端项目之王者荣耀爬虫" class="headerlink" title="前后端项目之王者荣耀爬虫"></a>前后端项目之王者荣耀爬虫</h3><h4 id="1-flask框架："><a href="#1-flask框架：" class="headerlink" title="1.flask框架："></a>1.flask框架：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure>

<p>​            第1行，引入Flask类，Flask类实现了一个WSGI应用<br>​            第2行，app是Flask的实例，它接收包或者模块的名字作为参数，但一般都是传递__name__。让flask.helpers.get_root_path函数通过传入这个名字确定程序的根目录，以便获得静态文件和模板文件的目录。<br>​            第4~6行，使用app.route装饰器会将URL和执行的视图函数的关系保存到app.url_map属性上。处理URL和视图函数的关系的程序就是路由，这里的视图函数就是hello_world。<br>​            第8行，使用这个判断可以保证当其他文件引用这个文件的时候（例如“from hello import app”）不会执行这个判断内的代码，也就是不会执行app.run函数。<br>​            第9行，执行app.run就可以启动服务了。默认Flask只监听虚拟机的本地127.0.0.1这个地址，端口为5000。而我们对虚拟机做的端口转发端口是9000，所以需要制定host和port参数，0.0.0.0表示监听所有地址，这样就可以在本机访问了。<br>​            服务器启动后，会调用werkzeug.serving.run_simple进入轮询，默认使用单进程单线程的werkzeug.serving.BaseWSGIServer处理请求，<br>​            实际上还是使用标准库BaseHTTPServer.HTTPServer，通过select.select做0.5秒的“while TRUE”的事件轮询。<br>​            当我们访问“<a href="http://127.0.0.1:9000/%E2%80%9D,%E9%80%9A%E8%BF%87app.url_map%E6%89%BE%E5%88%B0%E6%B3%A8%E5%86%8C%E7%9A%84%E2%80%9C/%E2%80%9D%E8%BF%99%E4%B8%AAURL%E6%A8%A1%E5%BC%8F,%E5%B0%B1%E6%89%BE%E5%88%B0%E4%BA%86%E5%AF%B9%E5%BA%94%E7%9A%84hello_world%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%94%E5%9B%9E%E2%80%9Chello">http://127.0.0.1:9000/”,通过app.url_map找到注册的“/”这个URL模式,就找到了对应的hello_world函数执行，返回“hello</a> world!”,状态码为200。<br>​            如果访问一个不存在的路径，如访问“<a href="http://127.0.0.1:9000/a%E2%80%9D,Flask%E6%89%BE%E4%B8%8D%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%90%91%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%94%E5%9B%9E%E2%80%9CNot">http://127.0.0.1:9000/a”,Flask找不到对应的模式，就会向浏览器返回“Not</a> Found”，状态码为404</p>
<p>​        原文链接：<a href="https://blog.csdn.net/christopherchen/article/details/54636846">https://blog.csdn.net/christopherchen/article/details/54636846</a></p>
<h4 id="2-WSGI"><a href="#2-WSGI" class="headerlink" title="2.WSGI"></a>2.WSGI</h4><p>了解了HTTP协议和HTML文档，我们其实就明白了一个Web应用的本质就是：</p>
<ol>
<li>浏览器发送一个HTTP请求；</li>
<li>服务器收到请求，生成一个HTML文档；</li>
<li>服务器把HTML文档作为HTTP响应的Body发送给浏览器；</li>
<li>浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。</li>
</ol>
<p>所以，最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。</p>
<p>如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p>
<p>正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。</p>
<p>这个接口就是WSGI：Web Server Gateway Interface。</p>
<p>WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面的<code>application()</code>函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数：</p>
<ul>
<li>environ：一个包含所有HTTP请求信息的<code>dict</code>对象；</li>
<li>start_response：一个发送HTTP响应的函数。</li>
</ul>
<p>在<code>application()</code>函数中，调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br></pre></td></tr></table></figure>

<p>就发送了HTTP响应的Header，注意Header只能发送一次，也就是只能调用一次<code>start_response()</code>函数。<code>start_response()</code>函数接收两个参数，一个是HTTP响应码，一个是一组<code>list</code>表示的HTTP Header，每个Header用一个包含两个<code>str</code>的<code>tuple</code>表示。</p>
<p>通常情况下，都应该把<code>Content-Type</code>头发送给浏览器。其他很多常用的HTTP Header也应该发送。</p>
<p>然后，函数的返回值<code>&#39;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#39;</code>将作为HTTP响应的Body发送给浏览器。</p>
<p>有了WSGI，我们关心的就是如何从<code>environ</code>这个<code>dict</code>对象拿到HTTP请求信息，然后构造HTML，通过<code>start_response()</code>发送Header，最后返回Body。</p>
<p>整个<code>application()</code>函数本身没有涉及到任何解析HTTP的部分，也就是说，底层代码不需要我们自己编写，我们只负责在更高层次上考虑如何响应请求就可以了。</p>
<p>不过，等等，这个<code>application()</code>函数怎么调用？如果我们自己调用，两个参数<code>environ</code>和<code>start_response</code>我们没法提供，返回的<code>str</code>也没法发给浏览器。</p>
<p>所以<code>application()</code>函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器，我们可以挑选一个来用。但是现在，我们只想尽快测试一下我们编写的<code>application()</code>函数真的可以把HTML输出到浏览器，所以，要赶紧找一个最简单的WSGI服务器，把我们的Web应用程序跑起来。</p>
<p>好消息是Python内置了一个WSGI服务器，这个模块叫wsgiref，它是用纯Python编写的WSGI服务器的参考实现。所谓“参考实现”是指该实现完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用</p>
<p>……</p>
<p>原文链接：<a href="https://www.liaoxuefeng.com/wiki/897692888725344/923057027806560">https://www.liaoxuefeng.com/wiki/897692888725344/923057027806560</a></p>
<h4 id="3-反爬虫机制和破解方法汇总"><a href="#3-反爬虫机制和破解方法汇总" class="headerlink" title="3.反爬虫机制和破解方法汇总"></a>3.反爬虫机制和破解方法汇总</h4><h6 id="什么是爬虫和反爬虫？"><a href="#什么是爬虫和反爬虫？" class="headerlink" title="什么是爬虫和反爬虫？"></a>什么是爬虫和反爬虫？</h6><ul>
<li><strong>爬虫</strong>：使用任何技术手段，批量获取网站信息的一种方式。</li>
<li><strong>反爬虫</strong>：使用任何技术手段，阻止别人批量获取自己网站信息的一种方式。</li>
</ul>
<h6 id="常见的反爬虫机制"><a href="#常见的反爬虫机制" class="headerlink" title="常见的反爬虫机制"></a>常见的反爬虫机制</h6><ul>
<li><strong>通过UA 识别爬虫</strong> 有些爬虫的UA(UserAgent)是特殊的，与正常浏览器的不一样，可通过识别特征UA，直接封掉爬虫请求</li>
<li><strong>设置IP访问频率，如果超过一定频率，弹出验证码</strong> 如果输入正确的验证码，则放行，如果没有输入，则拉入禁止一段时间，如果超过禁爬时间，再次出发验证码，则拉入黑名单。当然根据具体的业务，为不同场景设置不同阈值，比如登陆用户和非登陆用户，请求是否含有refer。</li>
<li><strong>通过并发识别爬虫</strong> 有些爬虫的并发是很高的，统计并发最高的IP，加入黑名单（或者直接封掉爬虫IP所在C段）</li>
<li><strong>请求的时间窗口过滤统计</strong> 爬虫爬取网页的频率都是比较固定的，不像人去访问网页，中间的间隔时间比较无规则，所以我们可以给每个IP地址建立一个时间窗口，记录IP地址最近12次访问时间，每记录一次就滑动一次窗口，比较最近访问时间和当前时间，如果间隔时间很长判断不是爬虫，清除时间窗口，如果间隔不长，就回溯计算指定时间段的访问频率，如果访问频率超过阀值，就转向验证码页面让用户填写验证码</li>
<li><strong>限制单个ip/api token的访问量</strong> 比如15分钟限制访问页面180次，具体标准可参考一些大型网站的公开api，如twitter api，对于抓取用户公开信息的爬虫要格外敏感</li>
<li><strong>识别出合法爬虫</strong> 对http头agent进行验证，是否标记为、百度的spider，严格一点的话应该判别来源IP是否为、baidu的爬虫IP，这些IP在网上都可以找到。校验出来IP不在白名单就可以阻止访问内容。</li>
<li><strong>蜜罐资源</strong> 爬虫解析离不开正则匹配，适当在页面添加一些正常浏览器浏览访问不到的资源，一旦有ip访问，过滤下头部是不是搜素引擎的蜘蛛，不是就可以直接封了。比如说隐式链接。</li>
</ul>
<h6 id="破解反爬虫机制的几种方法"><a href="#破解反爬虫机制的几种方法" class="headerlink" title="破解反爬虫机制的几种方法"></a>破解反爬虫机制的几种方法</h6><ul>
<li><strong>策略1</strong>：<strong>设置下载延迟</strong>，比如数字设置为5秒，越大越安全</li>
<li><strong>策略2</strong>：<strong>禁止Cookie</strong>，某些网站会通过Cookie识别用户身份，禁用后使得服务器无法识别爬虫轨迹</li>
<li><strong>策略3</strong>：<strong>使用user agent池</strong>。也就是每次发送的时候随机从池中选择不一样的浏览器头信息，防止暴露爬虫身份</li>
<li><strong>策略4</strong>：<strong>使用IP池</strong>，这个需要大量的IP资源，可以通过抓取网上免费公开的IP建成自有的IP代理池。</li>
<li><strong>策略5</strong>：<strong>分布式爬取</strong>，这个是针对大型爬虫系统的，实现一个分布式的爬虫，主要为以下几个步骤：  1、基本的http抓取工具，如scrapy；  2、避免重复抓取网页，如Bloom Filter；  3、维护一个所有集群机器能够有效分享的分布式队列；  4、将分布式队列和Scrapy的结合；  5、后续处理，网页析取(如python-goose)，存储(如Mongodb)。</li>
<li><strong>策略6：模拟登录—浏览器登录的爬取</strong> 设置一个cookie处理对象，它负责将cookie添加到http请求中，并能从http响应中得到cookie，向网站登录页面发送一个请求Request, 包括登录url，POST请求的数据，Http header利用urllib2.urlopen发送请求，接收WEB服务器的Response。</li>
</ul>
<h6 id="3-1并发用户数：同时与服务器进行交互在线用户量"><a href="#3-1并发用户数：同时与服务器进行交互在线用户量" class="headerlink" title="3.1并发用户数：同时与服务器进行交互在线用户量"></a>3.1并发用户数：同时与服务器进行交互在线用户量</h6><p>​    并发用户数量，有两种常见的错误观点。一种错误观点是把并发用户数量理解为使用系统的全部用户的数量，理由是这些用户可能同时使用系统；还有一种比较接近正确的观点是把用户在线数量理解为并发用户数量。</p>
<p>  实际上，在线用户不一定会和其他用户发生并发，例如正在浏览网页的用户，对服务器是没有任何影响的。但是，用户在线数量是统计并发用户数量的主要依据之一。</p>
<p>​    并发主要是针对服务器而言，是否并发的关键是看用户操作是否对服务器产生了影响。因此，并发用户数量的正确理解为：在同一时段与服务器进行了交互的在线用户数量。这些用户的最大特征是和服务器产生了交互，这种交互既可以是单向的传输数据，也可以是双向的传送数据。</p>
<h4 id="4-raise-for-status"><a href="#4-raise-for-status" class="headerlink" title="4.raise_for_status()"></a>4.<a href="https://blog.csdn.net/weixin_43360707/article/details/101034944">raise_for_status()</a></h4><p>能够判断返回的Response类型状态是不是200。如果是200，他将表示返回的内容是正确的，如果不是200，他就会产生一个HttpError的异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url, timeout = <span class="number">30</span>)</span><br><span class="line">r.raise_for_status()</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> “产生异常”</span><br></pre></td></tr></table></figure>

<p>这个代码中我们用r.raise_for_status()方法，它就可以有效的判断网络连接的状态。如果网连接出现错误，那么它就会用try-except来获取一个异常。而这个异常，在异常部分，我们用了一句 return “产生异常” 来表示，我们捕获到了这个异常，所以这样一个通用代码框架可以有效的处理，我们在访问或爬取网页过程中，它可能出现的一些错误，或者是网络不稳定造成的一些现象</p>
<h4 id="5-bind"><a href="#5-bind" class="headerlink" title="5.bind()"></a>5.<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind()</a></h4><p>Function.prototype.bind()</p>
<p><code>**bind()**</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">const module = &#123;</span><br><span class="line">  x: <span class="number">42</span>,</span><br><span class="line">  getX: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const unboundGetX = module.getX;</span><br><span class="line">console.log(unboundGetX()); // The function gets invoked at the <span class="keyword">global</span> scope</span><br><span class="line">// expected output: undefined</span><br><span class="line"></span><br><span class="line">const boundGetX = unboundGetX.bind(module);</span><br><span class="line">console.log(boundGetX());</span><br><span class="line">// expected output: <span class="number">42</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>

<p>thisArg : 调用绑定函数时作为 <code>this</code> 参数传递给目标函数的值。 如果使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new"><code>new</code></a>运算符构造绑定函数，则忽略该值。当使用 <code>bind</code> 在 <code>setTimeout</code> 中创建一个函数（作为回调提供）时，作为 <code>thisArg</code> 传递的任何原始值都将转换为 <code>object</code>。如果 <code>bind</code> 函数的参数列表为空，或者<code>thisArg</code>是<code>null</code>或<code>undefined</code>，执行作用域的 <code>this</code> 将被视为新函数的 <code>thisArg</code>。</p>
<p>arg1、arg2 : 当目标函数被调用时，被预置入绑定函数的参数列表中的参数</p>
<p>返回值：返回一个原函数的拷贝，并拥有指定的 <strong><code>this</code></strong> 值和初始参数。</p>
<p><strong>bind()</strong> 函数会创建一个新的<strong>绑定函数</strong>（<strong>bound function</strong>，BF）。绑定函数是一个 exotic function object（怪异函数对象，ECMAScript 2015 中的术语），它包装了原函数对象。调用<strong>绑定函数</strong>通常会导致执行<strong>包装函数</strong>。<br> <strong>绑定函数</strong>具有以下内部属性：</p>
<ul>
<li><strong>[[BoundTargetFunction]]</strong> - 包装的函数对象</li>
<li><strong>[[BoundThis]]</strong> - 在调用包装函数时始终作为 <strong>this</strong> 值传递的值。</li>
<li><strong>[[BoundArguments]]</strong> - 列表，在对包装函数做任何调用都会优先用列表元素填充参数列表。</li>
<li><strong>[[Call]]</strong> - 执行与此对象关联的代码。通过函数调用表达式调用。内部方法的参数是一个<strong>this</strong>值和一个包含通过调用表达式传递给函数的参数的列表。</li>
</ul>
<p>当调用绑定函数时，它调用 <strong>[[BoundTargetFunction]]</strong> 上的内部方法 **[[Call]]**，就像这样 <strong>Call(*boundThis*, *args*)<strong>。其中，</strong>boundThis</strong> 是 <strong>[[BoundThis]]<strong>，</strong>args</strong> 是 <strong>[[BoundArguments]]</strong> 加上通过函数调用传入的参数列表。</p>
<p>绑定函数也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new"><code>new</code></a> 运算符构造，它会表现为目标函数已经被构建完毕了似的。提供的 <code>this</code> 值会被忽略，但前置参数仍会提供给模拟函数。</p>
<h4 id="6-Python-f-字符串教程"><a href="#6-Python-f-字符串教程" class="headerlink" title="6.Python f 字符串教程"></a>6.<a href="https://geek-docs.com/python/python-tutorial/python-fstring.html">Python f 字符串教程</a></h4><p>f 字符串的前缀为<code>f</code>，并使用<code>&#123;&#125;</code>括号评估值。</p>
<p>在冒号后指定用于类型，填充或对齐的格式说明符； 例如：<code>f&#39;&#123;price:.3&#125;&#39;</code>，其中<code>price</code>是变量名。</p>
<p>举例：Python 中的字符串格式设置选项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;Peter&#x27;</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s is %d years old&#x27;</span> % (name, age))//这是最旧的选项。 它使用%运算符和经典字符串格式指定，例如%s和%d。</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is &#123;&#125; years old&#x27;</span>.<span class="built_in">format</span>(name, age))//从 Python <span class="number">3.0</span> 开始，<span class="built_in">format</span>()函数被引入以提供高级格式化选项。</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;age&#125;</span> years old&#x27;</span>)//从 Python <span class="number">3.6</span> 开始，Python f 字符串可用。 该字符串具有f前缀，并使用&#123;&#125;评估变量</span><br><span class="line">//输出是一样的 Peter <span class="keyword">is</span> <span class="number">23</span> years old</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//可以将表达式放在&#123;&#125;括号之间</span><br><span class="line">b= <span class="number">3</span></span><br><span class="line">a= <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(f&#123;b * a&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">//输出是36</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//可以使用 f 字符串中的字典</span><br><span class="line">user = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;occupation&#x27;</span>: <span class="string">&#x27;gardener&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;user[<span class="string">&#x27;name&#x27;</span>]&#125;</span> is a <span class="subst">&#123;user[<span class="string">&#x27;occupation&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">//John Doe <span class="keyword">is</span> a gardener</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//可以使用多行字符串。</span><br><span class="line">name = <span class="string">&#x27;John Doe&#x27;</span></span><br><span class="line">age = <span class="number">32</span></span><br><span class="line">occupation = <span class="string">&#x27;gardener&#x27;</span></span><br><span class="line">msg = (</span><br><span class="line">    <span class="string">f&#x27;Name: <span class="subst">&#123;name&#125;</span>\n&#x27;</span></span><br><span class="line">    <span class="string">f&#x27;Age: <span class="subst">&#123;age&#125;</span>\n&#x27;</span></span><br><span class="line">    <span class="string">f&#x27;Occupation: <span class="subst">&#123;occupation&#125;</span>&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">//Name: John Doe</span><br><span class="line">//Age: <span class="number">32</span></span><br><span class="line">//Occupation: gardener</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//可以在 f 字符串中调用函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mymax</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Max of <span class="subst">&#123;a&#125;</span> and <span class="subst">&#123;b&#125;</span> is <span class="subst">&#123;mymax(a, b)&#125;</span>&#x27;</span>)</span><br><span class="line">//Max of <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> <span class="keyword">is</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//也接受对象。 对象必须定义了`__str__()`或`__repr__()`魔术函数</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, occupation</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.occupation = occupation</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is a <span class="subst">&#123;self.occupation&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">u = User(<span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;gardener&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;u&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">//John Doe <span class="keyword">is</span> a gardener</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//示例格式化日期时间</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;now:%Y-%m-%d %H:%M&#125;</span>&#x27;</span>)</span><br><span class="line">//该示例显示格式化的当前日期时间。 日期时间格式说明符位于&lt;colon&gt;：&lt;/colon&gt;字符之后。2019-05-11 22:39</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//格式化浮点数</span><br><span class="line">//浮点值的后缀为f。 我们还可以指定精度：小数位数。 精度是一个点字符后的值。</span><br><span class="line">val = <span class="number">12.3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;val:<span class="number">.2</span>f&#125;</span>&#x27;</span>)//<span class="number">12.30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;val:<span class="number">.5</span>f&#125;</span>&#x27;</span>)//<span class="number">12.30000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//格式化宽度</span><br><span class="line">//宽度说明符设置值的宽度。 如果该值短于指定的宽度，则该值可以用空格或其他字符填充。</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;x:02&#125;</span> <span class="subst">&#123;x*x:<span class="number">3</span>&#125;</span> <span class="subst">&#123;x*x*x:<span class="number">4</span>&#125;</span>&#x27;</span>)</span><br><span class="line">//该示例打印三列，每个列都有一个预定义的宽度。 第一列使用 <span class="number">0</span> 填充较短的值。</span><br><span class="line">/*</span><br><span class="line">01   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">02   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line">03   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line">04  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line">05  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line">06  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line">07  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line">08  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line">09  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span>*/</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//字符串对齐字符串</span><br><span class="line">//默认情况下，字符串在左边对齐。 我们可以使用`&gt;`字符来对齐右侧的字符串。 `&gt;`字符在冒号后面。</span><br><span class="line">s1 = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line">s3 = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">s4 = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;s1:&gt;<span class="number">10</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;s2:&gt;<span class="number">10</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;s3:&gt;<span class="number">10</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;s4:&gt;<span class="number">10</span>&#125;</span>&#x27;</span>)</span><br><span class="line">/*</span><br><span class="line">         a</span><br><span class="line">        ab</span><br><span class="line">       abc</span><br><span class="line">      abcd</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//字符串数字符号</span><br><span class="line">//数字可以具有各种数字符号，例如十进制或十六进制。</span><br><span class="line">a = <span class="number">300</span></span><br><span class="line"><span class="comment"># hexadecimal  16进制  -&gt;12c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># octal    10进制  -&gt;454</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:o&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># scientific   -&gt;3.000000e+02</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
